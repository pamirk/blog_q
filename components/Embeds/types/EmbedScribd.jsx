import React, { Fragment } from 'react';
import compose from '../../../helpers/compose';
import PropTypes from 'prop-types';
import { Helmet } from 'react-helmet-async';
import { stringifyUrlParams } from '../../../helpers/urls';
import withProps from '../../../helpers/wrappers/withProps';
import withAmp from '../../../helpers/wrappers/withAmp';

const createScribdIFrameUrl = ( id, access_key, mode ) => {
	const url = `https://www.scribd.com/embeds/${id}/content`;
	let params = {
		show_recommendations: false,
		view_mode: mode,
	};

	// if it's an embed & not a shortcode, we won't have access key which is apparently okay by Scribd
	// clean up params to include or exclude it here
	params = stringifyUrlParams( access_key ? { access_key, ...params } : params );
	return `${url}${params}`;
};

export const parseScribdIdFromURL = ( url ) => {
	// matches the numeric id after 'document/'
	const match = url.match( /(document\/\d+)/ );
	if ( match === null ) {
		return null;
	}
	const [ result ] = match;
	const [ ignored, parseURLId ] = result.split( '/' );
	// if somehow there is a URL but no id (user error), return null
	if ( parseURLId ) {
		return parseURLId;
	}
	return null;
};

export const EmbedScribd = ( { id, access_key, mode } ) => (
	<iframe
		src={createScribdIFrameUrl( id, access_key, mode )}
		width="100%"
		height="500"
		allowFullScreen={true}
		frameBorder="0"
		title="Embedded Scribd document"
	></iframe>
);

export const EmbedScribdAMP = ( { id, access_key, mode } ) => (
	<Fragment>
		<Helmet>
			<script async={undefined} custom-element="amp-iframe" src="https://cdn.ampproject.org/v0/amp-iframe-0.1.js"></script>
		</Helmet>
		<amp-iframe
			src={createScribdIFrameUrl( id, access_key, mode )}
			width="620"
			height="500"
			frameBorder="0"
			layout="responsive"
			sandbox="allow-scripts allow-same-origin"
		>
		</amp-iframe>
	</Fragment>
);

EmbedScribd.propTypes = EmbedScribdAMP.propTypes = {
	access_key: PropTypes.string, // access_key generated by Scribd shortcodes
	id: PropTypes.string.isRequired, // ID of the embed, e.g. 36855912
	mode: PropTypes.string, // Scribd currently support 'scroll' or 'slideshow'
};

EmbedScribd.defaultProps = EmbedScribdAMP.defaultProps = {
	mode: 'scroll',
};

export default compose(
	withAmp( EmbedScribdAMP ),
	withProps( ( { id, url } ) => {
		// we will get either an ID or a URL from Scribd
		// if we have the ID, everything is hunky-dory
		// if not, we need to grab the ID from the url or fail gracefully if the url doesn't have it
		if ( !id ) {
			return {
				id: parseScribdIdFromURL( url ),
			};
		}
		return {};
	} )
)( EmbedScribd );
